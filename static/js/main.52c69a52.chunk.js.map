{"version":3,"sources":["components/Puzzle.jsx","components/ProblemControls.jsx","components/SearchControls.jsx","algorithms/BoyerMoore.js","algorithms/WordSearch.js","App.js","reportWebVitals.js","index.js"],"names":["Puzzle","props","state","letters","colors","grid","class","this","map","row","index","letter","i","style","backgroundColor","Component","ProblemControls","handleSelectedProblemChange","bind","event","a","getText","target","value","problem","lines","split","letterGrid","trim","push","test","words","word","onSelectedProblemChange","fileName","fetch","then","response","text","catch","err","console","log","fileDirectory","Form","Select","onChange","SearchControls","handleStartSearch","handleSpeedChange","handleSelectedWordChange","speed","onStartSearch","onSpeedChange","onSelectedWordChange","Range","defaultValue","min","max","step","Button","variant","onClick","selection","dir","x","m","directions","dim","frames","newFrame","JSON","parse","stringify","length","coords","WordSearch","stringCoordsToGridCoords","col","colorLetter","color","emptyColors","Array","BoyerMooreFind","T","P","n","lof","string","current","charAt","undefined","toString","lastOccurrenceFunction","j","t","l","parseInt","Math","reverseString","reverse","join","find","puzzleGrid","vertical","columns","getVertical","horizontal","rows","getRows","aDiagonal","ascendingDiagonal","startRow","startCol","getAscendingDiagonals","dDiagonal","descendingDiagonal","arrIndex","getDescendingDiagonals","rvertical","rhorizontal","raDiagonal","rdDiagonal","search","direction","result","App","selectedWord","initState","setState","toUpperCase","animation","setTimeout","newState","newSpeed","newWord","newProblem","Fragment","Container","Row","Col","md","span","offset","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.52c69a52.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Puzzle.css\";\r\n\r\nclass Puzzle extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      letters: this.props.letters,\r\n      colors: this.props.colors,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const grid = (\r\n      <div class=\"Puzzle\">\r\n        <table class=\"Puzzle-Grid\">\r\n          {this.props.letters.map((row, index) => (\r\n            <tr>\r\n              {row.map((letter, i) => (\r\n                <th\r\n                  class=\"Letter\"\r\n                  style={{ backgroundColor: this.props.colors[index][i] }}\r\n                >\r\n                  {letter}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </table>\r\n      </div>\r\n    );\r\n    return <>{grid}</>;\r\n  }\r\n}\r\n\r\nexport default Puzzle;\r\n","import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nclass ProblemControls extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleSelectedProblemChange =\r\n      this.handleSelectedProblemChange.bind(this);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  async handleSelectedProblemChange(event) {\r\n    let problem = await this.getText(event.target.value);\r\n    let lines = problem.split(\"\\n\");\r\n\r\n    let letterGrid = [];\r\n    let i = 0;\r\n    do {\r\n      let letters = lines[i].trim().split(\"\");\r\n      letterGrid.push(letters);\r\n      i++;\r\n    } while (!/^\\s*$/.test(lines[i]));\r\n    i++;\r\n    let words = [];\r\n    do {\r\n      let word = lines[i].trim();\r\n      words.push(word);\r\n      i++;\r\n    } while (lines[i] && lines[i].trim());\r\n    problem = {};\r\n    problem.letters = letterGrid;\r\n    problem.words = words;\r\n\r\n    this.props.onSelectedProblemChange(problem);\r\n  }\r\n\r\n  async getText(fileName) {\r\n    let response = await fetch(fileName)\r\n      .then((response) => response.text())\r\n      .catch((err) => console.log(err));\r\n    return response;\r\n  }\r\n\r\n  render() {\r\n    const fileDirectory =\r\n      \"https://raw.githubusercontent.com/saahbha/word-search-react/gh-pages/problems/\";\r\n\r\n    return (\r\n      <Form.Select\r\n        aria-label=\"Problem Selector\"\r\n        onChange={this.handleSelectedProblemChange}\r\n      >\r\n        <option value={fileDirectory + \"default.txt\"}>Default</option>\r\n        <option value={fileDirectory + \"coding-languages.txt\"}>\r\n          Coding Languages\r\n        </option>\r\n        <option value={fileDirectory + \"famous-artists.txt\"}>\r\n          Famous Artists\r\n        </option>\r\n        <option value={fileDirectory + \"famous-books.txt\"}>Famous Books</option>\r\n      </Form.Select>\r\n    );\r\n  }\r\n}\r\nexport default ProblemControls;\r\n","import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nclass SearchControls extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleStartSearch = this.handleStartSearch.bind(this);\r\n    this.handleSpeedChange = this.handleSpeedChange.bind(this);\r\n    this.handleSelectedWordChange = this.handleSelectedWordChange.bind(this);\r\n\r\n    this.state = {\r\n      speed: this.props.speed,\r\n      words: this.props.words,\r\n    };\r\n  }\r\n\r\n  handleStartSearch() {\r\n    this.props.onStartSearch();\r\n  }\r\n\r\n  handleSpeedChange(event) {\r\n    this.props.onSpeedChange(event.target.value);\r\n  }\r\n\r\n  handleSelectedWordChange(event) {\r\n    this.props.onSelectedWordChange(event.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Form.Select\r\n          aria-label=\"Word Selector\"\r\n          onChange={this.handleSelectedWordChange}\r\n        >\r\n          {this.props.words.map((word) => (\r\n            <option value={word}>{word}</option>\r\n          ))}\r\n        </Form.Select>\r\n        <Form.Range\r\n          defaultValue={this.state.speed}\r\n          min={0}\r\n          max={500}\r\n          step={10}\r\n          onChange={this.handleSpeedChange}\r\n        />\r\n        <Button variant=\"primary\" onClick={this.handleStartSearch}>\r\n          Start/End Search\r\n        </Button>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default SearchControls;\r\n","import WordSearch from './WordSearch';\r\n\r\nfunction lastOccurrenceFunction(string) {\r\n    let lof = {};\r\n\tfor (let i = string.length - 1; i >= 0; i--) {\r\n        let current = string.charAt(i);\r\n        if (lof[current] === undefined) {\r\n            lof[current] = i.toString();\r\n        }\r\n    }\r\n    return lof;\r\n}\r\n\r\nfunction BoyerMooreFind(T, P, colors, dir, x, directions, dim){\r\n    let n = T.length;\r\n    let m = P.length;\r\n    if (m > n) return [-1, colors];\r\n    let lof = lastOccurrenceFunction(P);\r\n\r\n    let i = m - 1;\r\n    let j = m - 1;\r\n    //color the selection grey\r\n    colors = selection(dir, x, i, m, directions, dim, colors);\r\n    do {\r\n        let t = T.charAt(i);\r\n        let p = P.charAt(j);\r\n        //match\r\n        if (t == p) {\r\n            //color the letter corisponding to 't' is green\r\n            colors = colorLetter(dir, x, i, 'green', directions, dim, colors);\r\n\r\n            if (j == 0) return [i, colors];\r\n            else {\r\n                i--;\r\n                j--;\r\n            }\r\n        }\r\n        //no match\r\n        else {\r\n            //color the letter corisponding to 't' is red\r\n            colors = colorLetter(dir, x, i, 'red', directions, dim, colors);\r\n\r\n            let l = -1;\r\n            if (lof[t] !== undefined) {\r\n                //color the letter corisponding to 't' is orange \r\n                colors = colorLetter(dir, x, i, 'orange', directions, dim, colors);\r\n                l = parseInt(lof[t]);\r\n            }\r\n            i = i + m - Math.min(j, 1 + l);\r\n            j = m - 1;\r\n\r\n            //start over \r\n            colors = emptyColors(colors, dim);\r\n            if (!(i > n - 1)) {\r\n                //color the selection grey\r\n                colors = selection(dir, x, i, m, directions, dim, colors);\r\n            }\r\n        }\r\n    } while (!(i > n - 1));\r\n\r\n    return [-1, colors];\r\n}\r\n\r\nfunction selection(dir, x, i, m, directions, dim, frames) {\r\n    let newFrame = JSON.parse(JSON.stringify(frames[frames.length-1]));\r\n    for (let index = i; index >= (i - m + 1); index--) {\r\n        let coords = WordSearch.stringCoordsToGridCoords(dir, x, index, directions, dim);\r\n        let row = coords[0];\r\n        let col = coords[1];\r\n        newFrame[row][col] = 'grey';\r\n    }\r\n    frames.push(newFrame);\r\n    return frames;\r\n}\r\n\r\nfunction colorLetter(dir, x, i, color, directions, dim, frames) {\r\n    let newFrame = JSON.parse(JSON.stringify(frames[frames.length-1]));\r\n    let coords = WordSearch.stringCoordsToGridCoords(dir, x, i, directions, dim);\r\n    let row = coords[0];\r\n    let col = coords[1];\r\n    newFrame[row][col] = color;\r\n    frames.push(newFrame);\r\n    return frames;\r\n}\r\n\r\nfunction emptyColors(frames, dim) {\r\n    let newFrame = Array(dim);\r\n    for (let row = 0; row < dim; row++) {\r\n        newFrame[row] = Array(dim);\r\n        for (let col = 0; col < dim; col++) {\r\n            newFrame[row][col] = '';\r\n        }\r\n    }\r\n    frames.push(newFrame);\r\n    return frames;\r\n}\r\n\r\nexport default BoyerMooreFind;","import BoyerMooreFind from \"./BoyerMoore\";\r\n\r\nfunction find(puzzleGrid, target) {\r\n    //initialize animation frames\r\n    let colors = Array(1);\r\n    colors[0] = Array(puzzleGrid.length);\r\n    for (let row = 0; row < colors[0].length; row++) {\r\n        colors[0][row] = Array(puzzleGrid[row].length);\r\n        for (let col = 0; col < puzzleGrid[row].length; col++) {\r\n            colors[0][row][col] = '';\r\n        }\r\n    }\r\n\r\n    let dim = puzzleGrid[0].length;\r\n    //generate strings for each basic direction\r\n    let vertical = getVertical(puzzleGrid);\r\n    let horizontal = getRows(puzzleGrid);\r\n    let aDiagonal = getAscendingDiagonals(puzzleGrid);\r\n    let dDiagonal = getDescendingDiagonals(puzzleGrid);\r\n\r\n    //make sets of arrays for reverse order\r\n    let rvertical = new Array(vertical.length);\r\n    let rhorizontal = new Array(horizontal.length);\r\n    let raDiagonal = new Array(aDiagonal.length);\r\n    let rdDiagonal = new Array(dDiagonal.length);\r\n    for (let i = 0; i < vertical.length; i++) {\r\n        rvertical[i] = reverseString(vertical[i]);\r\n        rhorizontal[i] = reverseString(horizontal[i]);\r\n    }\r\n    for (let i = 0; i < aDiagonal.length; i++) {\r\n        raDiagonal[i] = reverseString(aDiagonal[i]);\r\n        rdDiagonal[i] = reverseString(dDiagonal[i]);\r\n    }\r\n\r\n    //put these in directions\r\n    let directions = new Array(8);\r\n    directions[0] = vertical;\r\n    directions[1] = dDiagonal;\r\n    directions[2] = horizontal;\r\n    directions[3] = aDiagonal;\r\n    directions[4] = rvertical;\r\n    directions[5] = rdDiagonal;\r\n    directions[6] = rhorizontal;\r\n    directions[7] = raDiagonal;\r\n\r\n    //Search using BoyerMoore\r\n    let dir = 0;\r\n    let index = 0;\r\n    let x = 0;\r\n    search:\r\n    for (dir = 0; dir <= directions.length; dir++) {\r\n        if (dir == 8) {\r\n            dir = -1;\r\n            break search;\r\n        }\r\n        let direction = directions[dir];\r\n        for (x = 0; x < direction.length; x++) {\r\n            //string, word to find, color grid, the direction, the string number in this direction, the dimension of the grid\r\n            let result = BoyerMooreFind(direction[x], target, colors, dir, x, directions, dim);\r\n            index = result[0];\r\n            colors = result[1];\r\n            if (index != -1) break search;\r\n        }\r\n    }\r\n\r\n    return colors;\r\n}\r\n\r\n\r\nfunction reverseString(string) {\r\n    return string.split(\"\").reverse().join(\"\");\r\n}\r\n\r\nfunction getVertical(puzzleGrid) {\r\n    let dim = puzzleGrid[0].length;\r\n    let columns = new Array(dim);\r\n    //Get Column Strings from the puzzleGrid\r\n    for (let col = 0; col < dim; col++) {\r\n        columns[col] = \"\";\r\n        for (let row = 0; row < dim; row++) {\r\n            columns[col] += puzzleGrid[row][col];\r\n        }\r\n    }\r\n    return columns;\r\n}\r\n\r\nfunction getRows(puzzleGrid) {\r\n    let dim = puzzleGrid[0].length;\r\n    let rows = new Array(dim);\r\n    //Get Row Strings from the puzzleGrid\r\n    for (let row = 0; row < dim; row++) {\r\n        rows[row] = \"\";\r\n        for (let col = 0; col < dim; col++) {\r\n            rows[row] += puzzleGrid[row][col];\r\n        }\r\n    }\r\n    return rows;\r\n}\r\n\r\nfunction getAscendingDiagonals(puzzleGrid) {\r\n    let dim = puzzleGrid[0].length;\r\n    let ascendingDiagonal = new Array(dim*2 - 1);\r\n    for (let startRow = 0; startRow < dim; startRow++) {\r\n        ascendingDiagonal[startRow] = \"\";\r\n        for (let col = 0; col <= startRow; col++) {\r\n            ascendingDiagonal[startRow] += puzzleGrid[startRow - col][col];\r\n        }\r\n    }\r\n    for (let startCol = 1; startCol < dim; startCol++) {\r\n        ascendingDiagonal[dim + startCol - 1] = \"\";\r\n        for (let row = dim - 1; row >= startCol; row--) {\r\n            ascendingDiagonal[dim - 1 + startCol] += puzzleGrid[row][startCol + (dim - 1) - row];\r\n        }\r\n    }\r\n\r\n    return ascendingDiagonal;\r\n}\r\n\r\nfunction getDescendingDiagonals(puzzleGrid) {\r\n    let dim = puzzleGrid[0].length;\r\n    let descendingDiagonal = new Array(dim*2 - 1);\r\n    for (let startCol = dim - 1; startCol >= 0; startCol--) {\r\n        let arrIndex = dim - 1 - startCol;\r\n        descendingDiagonal[arrIndex] = \"\";\r\n        for (let row = 0; row <= arrIndex; row++) {\r\n            descendingDiagonal[arrIndex] += puzzleGrid[row][startCol + row];\r\n        }\r\n    }\r\n    for (let startRow = 1; startRow < dim; startRow++) {\r\n        let arrIndex = dim - 1 + startRow;\r\n        descendingDiagonal[arrIndex] = \"\";\r\n        for (let col = 0; col <= dim - 1 - startRow; col++) {\r\n            descendingDiagonal[arrIndex] += puzzleGrid[startRow + col][col];\r\n        }\r\n    }\r\n\r\n    return descendingDiagonal;\r\n}\r\n\r\nfunction stringCoordsToGridCoords(dir, x, find, directions, dim) {\r\n    let row = -1;\r\n    let col = -1;\r\n\r\n    //Translate (x,find) to (row,col)\r\n    if (dir == 0) {\r\n        row = find;\r\n        col = x;\r\n    }\r\n    else if (dir == 1) {\r\n        if (x < dim) {\r\n            row = find;\r\n            col = dim - 1 - x + find;\r\n        } else {\r\n            row = x - dim + 1 + find;\r\n            col = find;\r\n        }\r\n    }\r\n    else if (dir == 2) {\r\n        row = x;\r\n        col = find;\r\n    }\r\n    else if (dir == 3) {\r\n        if (x < dim) {\r\n            row = x - find;\r\n            col = find;\r\n        } else {\r\n            row = dim - 1 - find;\r\n            col = x - dim + 1 + find;\r\n        }\r\n    }\r\n    else if (dir == 4) {\r\n        row = dim - 1 - find;\r\n        col = x;\r\n    }\r\n    else if (dir == 5) {\r\n        find = directions[dir][x].length - find - 1;\r\n        if (x < dim) {\r\n            row = find;\r\n            col = dim - 1 - x + find;\r\n        } else {\r\n            row = x - dim + 1 + find;\r\n            col = find;\r\n        }\r\n    }\r\n    else if (dir == 6) {\r\n        row = x;\r\n        col = dim - 1 - find;\r\n    }\r\n    else if (dir == 7) {\r\n        find = directions[dir][x].length - find - 1;\r\n        if (x < dim) {\r\n            row = x - find;\r\n            col = find;\r\n        } else {\r\n            row = dim - 1 - find;\r\n            col = x - dim + 1 + find;\r\n        }\r\n    }\r\n    return [row, col];\r\n}\r\n\r\nexport default {find, stringCoordsToGridCoords};","import React, { Component } from \"react\";\n\nimport Puzzle from \"./components/Puzzle\";\nimport ProblemControls from \"./components/ProblemControls\"\nimport SearchControls from \"./components/SearchControls\";\nimport WordSearch from \"./algorithms/WordSearch\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleStartSearch = this.handleStartSearch.bind(this);\n    this.handleSpeedChange = this.handleSpeedChange.bind(this);\n    this.handleSelectedWordChange = this.handleSelectedWordChange.bind(this);\n    this.handleSelectedProblemChange = this.handleSelectedProblemChange.bind(this);\n\n    this.state = {\n      words: [],\n      letters: [[]],\n      colors: [[]],\n      speed: 350,\n      selectedWord: '',\n    };\n  }\n\n  componentDidMount() {\n    let initState = this.state;\n    initState.words = [\"Purdue\", 'hey', 'yeh', 'zop', 'poz', 'don', 'nod', 'mnd', 'aor'];\n    initState.letters = [\n        ['D','R','L','B','V','W','R'],\n        ['P','E','E','K','P','E','E'],\n        ['O','U','D','K','P','S','L'],\n        ['U','A','R','O','A','T','I'],\n        ['L','E','Z','D','N','M','O'],\n        ['Y','D','N','I','U','E','B'],\n        ['I','O','P','H','H','E','Y'],\n      ];\n      initState.colors = Array(initState.letters.length);\n      for (let row = 0; row < initState.colors.length; row++) {\n        initState.colors[row] = Array(initState.letters[row].length);\n        for (let col = 0; col < initState.letters[row].length; col++) {\n          initState.colors[row][col] = '';\n        }\n      }\n      initState.selectedWord = initState.words[0];\n      this.setState(initState);\n  }\n  handleStartSearch() {\n    let target = this.state.selectedWord.toUpperCase().split(\" \").join(\"\");\n    const animation = WordSearch.find(this.state.letters, target);\n    \n    for (let i = 0; i < animation.length; i++) {\n      setTimeout( () => {\n        let newState = this.state;\n        newState.colors = animation[i];\n        this.setState(newState);\n      }, (500-this.state.speed)*i);\n    }\n  }\n\n  handleSpeedChange(newSpeed) {\n    let newState = this.state;\n    newState.speed = newSpeed;\n    this.setState(newState);\n  }\n\n  handleSelectedWordChange(newWord) {\n    let newState = this.state;\n    newState.selectedWord = newWord;\n    this.setState(newState);\n  }\n\n  handleSelectedProblemChange(newProblem) {\n    let newState = this.state;\n    newState.letters = newProblem.letters;\n    newState.words = newProblem.words;\n\n    let emptyColors = Array(newState.letters.length);\n    for (let row = 0; row < newState.letters.length; row++) {\n      emptyColors[row] = Array(newState.letters[row].length);\n      for (let col = 0; col < newState.letters[row].length; col++) {\n        emptyColors[row][col] = '';\n      }\n    }\n    newState.colors = emptyColors;\n\n    this.setState(newState);\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Container>\n          <Row>\n            <ProblemControls\n            onSelectedProblemChange = {this.handleSelectedProblemChange}\n            />\n          </Row>\n          <Row>\n            <Col md={{ span: 3, offset: 0 }}>\n              <Puzzle\n                letters = {this.state.letters}\n                colors = {this.state.colors}\n              />\n            </Col>\n            <Col md={{ span: 3, offset: 0 }}>\n              <SearchControls\n                words = {this.state.words}\n                speed = {this.state.speed}\n                onSelectedWordChange = {this.handleSelectedWordChange}\n                onSpeedChange = {this.handleSpeedChange}\n                onStartSearch = {this.handleStartSearch}\n              />\n            </Col>\n          </Row>\n        </Container>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}