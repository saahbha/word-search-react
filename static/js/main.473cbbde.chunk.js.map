{"version":3,"sources":["components/Puzzle.jsx","components/ProblemControls.jsx","components/SearchControls.jsx","algorithms/BoyerMoore.js","algorithms/WordSearch.js","App.js","reportWebVitals.js","index.js"],"names":["Puzzle","props","state","letters","colors","grid","class","this","map","row","index","letter","i","style","backgroundColor","Component","ProblemControls","handleSelectedProblemChange","bind","event","file","target","value","request","XMLHttpRequest","open","send","onreadystatechange","readyState","status","getResponseHeader","indexOf","text","responseText","console","log","onSelectedProblemChange","Form","Select","onChange","SearchControls","handleStartSearch","handleSpeedChange","handleSelectedWordChange","speed","words","onStartSearch","onSpeedChange","onSelectedWordChange","word","Range","defaultValue","min","max","step","Button","variant","onClick","selection","dir","x","m","directions","dim","frames","newFrame","JSON","parse","stringify","length","coords","WordSearch","stringCoordsToGridCoords","col","push","colorLetter","color","emptyColors","Array","BoyerMooreFind","T","P","n","lof","string","current","charAt","undefined","toString","lastOccurrenceFunction","j","t","l","parseInt","Math","reverseString","split","reverse","join","find","puzzleGrid","vertical","columns","getVertical","horizontal","rows","getRows","aDiagonal","ascendingDiagonal","startRow","startCol","getAscendingDiagonals","dDiagonal","descendingDiagonal","arrIndex","getDescendingDiagonals","rvertical","rhorizontal","raDiagonal","rdDiagonal","search","direction","result","App","selectedWord","initState","setState","toUpperCase","animation","setTimeout","newState","newSpeed","newWord","newProblem","Fragment","Container","Row","Col","md","span","offset","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.473cbbde.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Puzzle.css\";\r\n\r\nclass Puzzle extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      letters: this.props.letters,\r\n      colors: this.props.colors,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const grid = (\r\n      <div class=\"Puzzle\">\r\n        <table class=\"Puzzle-Grid\">\r\n          {this.props.letters.map((row, index) => (\r\n            <tr>\r\n              {row.map((letter, i) => (\r\n                <th\r\n                  class=\"Letter\"\r\n                  style={{ backgroundColor: this.props.colors[index][i] }}\r\n                >\r\n                  {letter}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </table>\r\n      </div>\r\n    );\r\n    return <>{grid}</>;\r\n  }\r\n}\r\n\r\nexport default Puzzle;\r\n","import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\n\r\nclass ProblemControls extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleSelectedProblemChange =\r\n      this.handleSelectedProblemChange.bind(this);\r\n\r\n    this.state = {};\r\n  }\r\n\r\n  handleSelectedProblemChange(event) {\r\n    const file = event.target.value;\r\n\r\n    let request = new XMLHttpRequest();\r\n    request.open(\"GET\", file, true);\r\n    request.send(null);\r\n    request.onreadystatechange = function () {\r\n      if (request.readyState === 4 && request.status === 200) {\r\n        let type = request.getResponseHeader(\"Content-Type\");\r\n        if (type.indexOf(\"text\") !== 1) {\r\n          let text = request.responseText;\r\n          console.log(text);\r\n        }\r\n      }\r\n    };\r\n\r\n    this.props.onSelectedProblemChange(event);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Form.Select\r\n        aria-label=\"Problem Selector\"\r\n        onChange={this.handleSelectedProblemChange}\r\n      >\r\n        <option value=\"\">Default</option>\r\n        <option value=\"\">Coding Languages</option>\r\n        <option value=\"\">Famous Artists</option>\r\n        <option value=\"\">Famous Books</option>\r\n      </Form.Select>\r\n    );\r\n  }\r\n}\r\nexport default ProblemControls;\r\n","import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nclass SearchControls extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleStartSearch = this.handleStartSearch.bind(this);\r\n    this.handleSpeedChange = this.handleSpeedChange.bind(this);\r\n    this.handleSelectedWordChange = this.handleSelectedWordChange.bind(this);\r\n\r\n    this.state = {\r\n      speed: this.props.speed,\r\n      words: this.props.words,\r\n    };\r\n  }\r\n\r\n  handleStartSearch() {\r\n    this.props.onStartSearch();\r\n  }\r\n\r\n  handleSpeedChange(event) {\r\n    this.props.onSpeedChange(event.target.value);\r\n  }\r\n\r\n  handleSelectedWordChange(event) {\r\n    this.props.onSelectedWordChange(event.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <Form.Select\r\n          aria-label=\"Word Selector\"\r\n          onChange={this.handleSelectedWordChange}\r\n        >\r\n          {this.props.words.map((word) => (\r\n            <option value={word}>{word}</option>\r\n          ))}\r\n        </Form.Select>\r\n        <Form.Range\r\n          defaultValue={this.state.speed}\r\n          min={0}\r\n          max={500}\r\n          step={10}\r\n          onChange={this.handleSpeedChange}\r\n        />\r\n        <Button variant=\"primary\" onClick={this.handleStartSearch}>\r\n          Start/End Search\r\n        </Button>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default SearchControls;\r\n","import WordSearch from './WordSearch';\r\n\r\nfunction lastOccurrenceFunction(string) {\r\n    let lof = {};\r\n\tfor (let i = string.length - 1; i >= 0; i--) {\r\n        let current = string.charAt(i);\r\n        if (lof[current] === undefined) {\r\n            lof[current] = i.toString();\r\n        }\r\n    }\r\n    return lof;\r\n}\r\n\r\nfunction BoyerMooreFind(T, P, colors, dir, x, directions, dim){\r\n    let n = T.length;\r\n    let m = P.length;\r\n    if (m > n) return [-1, colors];\r\n    let lof = lastOccurrenceFunction(P);\r\n\r\n    let i = m - 1;\r\n    let j = m - 1;\r\n    //color the selection grey\r\n    colors = selection(dir, x, i, m, directions, dim, colors);\r\n    do {\r\n        let t = T.charAt(i);\r\n        let p = P.charAt(j);\r\n        //match\r\n        if (t == p) {\r\n            //color the letter corisponding to 't' is green\r\n            colors = colorLetter(dir, x, i, 'green', directions, dim, colors);\r\n\r\n            if (j == 0) return [i, colors];\r\n            else {\r\n                i--;\r\n                j--;\r\n            }\r\n        }\r\n        //no match\r\n        else {\r\n            //color the letter corisponding to 't' is red\r\n            colors = colorLetter(dir, x, i, 'red', directions, dim, colors);\r\n\r\n            let l = -1;\r\n            if (lof[t] !== undefined) {\r\n                //color the letter corisponding to 't' is orange \r\n                colors = colorLetter(dir, x, i, 'orange', directions, dim, colors);\r\n                l = parseInt(lof[t]);\r\n            }\r\n            i = i + m - Math.min(j, 1 + l);\r\n            j = m - 1;\r\n\r\n            //start over \r\n            colors = emptyColors(colors, dim);\r\n            if (!(i > n - 1)) {\r\n                //color the selection grey\r\n                colors = selection(dir, x, i, m, directions, dim, colors);\r\n            }\r\n        }\r\n    } while (!(i > n - 1));\r\n\r\n    return [-1, colors];\r\n}\r\n\r\nfunction selection(dir, x, i, m, directions, dim, frames) {\r\n    let newFrame = JSON.parse(JSON.stringify(frames[frames.length-1]));\r\n    for (let index = i; index >= (i - m + 1); index--) {\r\n        let coords = WordSearch.stringCoordsToGridCoords(dir, x, index, directions, dim);\r\n        let row = coords[0];\r\n        let col = coords[1];\r\n        newFrame[row][col] = 'grey';\r\n    }\r\n    frames.push(newFrame);\r\n    return frames;\r\n}\r\n\r\nfunction colorLetter(dir, x, i, color, directions, dim, frames) {\r\n    let newFrame = JSON.parse(JSON.stringify(frames[frames.length-1]));\r\n    let coords = WordSearch.stringCoordsToGridCoords(dir, x, i, directions, dim);\r\n    let row = coords[0];\r\n    let col = coords[1];\r\n    newFrame[row][col] = color;\r\n    frames.push(newFrame);\r\n    return frames;\r\n}\r\n\r\nfunction emptyColors(frames, dim) {\r\n    let newFrame = Array(dim);\r\n    for (let row = 0; row < dim; row++) {\r\n        newFrame[row] = Array(dim);\r\n        for (let col = 0; col < dim; col++) {\r\n            newFrame[row][col] = '';\r\n        }\r\n    }\r\n    frames.push(newFrame);\r\n    return frames;\r\n}\r\n\r\nexport default BoyerMooreFind;","import BoyerMooreFind from \"./BoyerMoore\";\r\n\r\nfunction find(puzzleGrid, target) {\r\n    //initialize animation frames\r\n    let colors = Array(1);\r\n    colors[0] = Array(puzzleGrid.length);\r\n    for (let row = 0; row < colors[0].length; row++) {\r\n        colors[0][row] = Array(puzzleGrid[row].length);\r\n        for (let col = 0; col < puzzleGrid[row].length; col++) {\r\n            colors[0][row][col] = '';\r\n        }\r\n    }\r\n\r\n    let dim = puzzleGrid[0].length;\r\n    //generate strings for each basic direction\r\n    let vertical = getVertical(puzzleGrid);\r\n    let horizontal = getRows(puzzleGrid);\r\n    let aDiagonal = getAscendingDiagonals(puzzleGrid);\r\n    let dDiagonal = getDescendingDiagonals(puzzleGrid);\r\n\r\n    //make sets of arrays for reverse order\r\n    let rvertical = new Array(vertical.length);\r\n    let rhorizontal = new Array(horizontal.length);\r\n    let raDiagonal = new Array(aDiagonal.length);\r\n    let rdDiagonal = new Array(dDiagonal.length);\r\n    for (let i = 0; i < vertical.length; i++) {\r\n        rvertical[i] = reverseString(vertical[i]);\r\n        rhorizontal[i] = reverseString(horizontal[i]);\r\n    }\r\n    for (let i = 0; i < aDiagonal.length; i++) {\r\n        raDiagonal[i] = reverseString(aDiagonal[i]);\r\n        rdDiagonal[i] = reverseString(dDiagonal[i]);\r\n    }\r\n\r\n    //put these in directions\r\n    let directions = new Array(8);\r\n    directions[0] = vertical;\r\n    directions[1] = dDiagonal;\r\n    directions[2] = horizontal;\r\n    directions[3] = aDiagonal;\r\n    directions[4] = rvertical;\r\n    directions[5] = rdDiagonal;\r\n    directions[6] = rhorizontal;\r\n    directions[7] = raDiagonal;\r\n\r\n    //Search using BoyerMoore\r\n    let dir = 0;\r\n    let index = 0;\r\n    let x = 0;\r\n    search:\r\n    for (dir = 0; dir <= directions.length; dir++) {\r\n        if (dir == 8) {\r\n            dir = -1;\r\n            break search;\r\n        }\r\n        let direction = directions[dir];\r\n        for (x = 0; x < direction.length; x++) {\r\n            //string, word to find, color grid, the direction, the string number in this direction, the dimension of the grid\r\n            let result = BoyerMooreFind(direction[x], target, colors, dir, x, directions, dim);\r\n            index = result[0];\r\n            colors = result[1];\r\n            if (index != -1) break search;\r\n        }\r\n    }\r\n\r\n    return colors;\r\n}\r\n\r\n\r\nfunction reverseString(string) {\r\n    return string.split(\"\").reverse().join(\"\");\r\n}\r\n\r\nfunction getVertical(puzzleGrid) {\r\n    let dim = puzzleGrid[0].length;\r\n    let columns = new Array(dim);\r\n    //Get Column Strings from the puzzleGrid\r\n    for (let col = 0; col < dim; col++) {\r\n        columns[col] = \"\";\r\n        for (let row = 0; row < dim; row++) {\r\n            columns[col] += puzzleGrid[row][col];\r\n        }\r\n    }\r\n    return columns;\r\n}\r\n\r\nfunction getRows(puzzleGrid) {\r\n    let dim = puzzleGrid[0].length;\r\n    let rows = new Array(dim);\r\n    //Get Row Strings from the puzzleGrid\r\n    for (let row = 0; row < dim; row++) {\r\n        rows[row] = \"\";\r\n        for (let col = 0; col < dim; col++) {\r\n            rows[row] += puzzleGrid[row][col];\r\n        }\r\n    }\r\n    return rows;\r\n}\r\n\r\nfunction getAscendingDiagonals(puzzleGrid) {\r\n    let dim = puzzleGrid[0].length;\r\n    let ascendingDiagonal = new Array(dim*2 - 1);\r\n    for (let startRow = 0; startRow < dim; startRow++) {\r\n        ascendingDiagonal[startRow] = \"\";\r\n        for (let col = 0; col <= startRow; col++) {\r\n            ascendingDiagonal[startRow] += puzzleGrid[startRow - col][col];\r\n        }\r\n    }\r\n    for (let startCol = 1; startCol < dim; startCol++) {\r\n        ascendingDiagonal[dim + startCol - 1] = \"\";\r\n        for (let row = dim - 1; row >= startCol; row--) {\r\n            ascendingDiagonal[dim - 1 + startCol] += puzzleGrid[row][startCol + (dim - 1) - row];\r\n        }\r\n    }\r\n\r\n    return ascendingDiagonal;\r\n}\r\n\r\nfunction getDescendingDiagonals(puzzleGrid) {\r\n    let dim = puzzleGrid[0].length;\r\n    let descendingDiagonal = new Array(dim*2 - 1);\r\n    for (let startCol = dim - 1; startCol >= 0; startCol--) {\r\n        let arrIndex = dim - 1 - startCol;\r\n        descendingDiagonal[arrIndex] = \"\";\r\n        for (let row = 0; row <= arrIndex; row++) {\r\n            descendingDiagonal[arrIndex] += puzzleGrid[row][startCol + row];\r\n        }\r\n    }\r\n    for (let startRow = 1; startRow < dim; startRow++) {\r\n        let arrIndex = dim - 1 + startRow;\r\n        descendingDiagonal[arrIndex] = \"\";\r\n        for (let col = 0; col <= dim - 1 - startRow; col++) {\r\n            descendingDiagonal[arrIndex] += puzzleGrid[startRow + col][col];\r\n        }\r\n    }\r\n\r\n    return descendingDiagonal;\r\n}\r\n\r\nfunction stringCoordsToGridCoords(dir, x, find, directions, dim) {\r\n    let row = -1;\r\n    let col = -1;\r\n\r\n    //Translate (x,find) to (row,col)\r\n    if (dir == 0) {\r\n        row = find;\r\n        col = x;\r\n    }\r\n    else if (dir == 1) {\r\n        if (x < dim) {\r\n            row = find;\r\n            col = dim - 1 - x + find;\r\n        } else {\r\n            row = x - dim + 1 + find;\r\n            col = find;\r\n        }\r\n    }\r\n    else if (dir == 2) {\r\n        row = x;\r\n        col = find;\r\n    }\r\n    else if (dir == 3) {\r\n        if (x < dim) {\r\n            row = x - find;\r\n            col = find;\r\n        } else {\r\n            row = dim - 1 - find;\r\n            col = x - dim + 1 + find;\r\n        }\r\n    }\r\n    else if (dir == 4) {\r\n        row = dim - 1 - find;\r\n        col = x;\r\n    }\r\n    else if (dir == 5) {\r\n        find = directions[dir][x].length - find - 1;\r\n        if (x < dim) {\r\n            row = find;\r\n            col = dim - 1 - x + find;\r\n        } else {\r\n            row = x - dim + 1 + find;\r\n            col = find;\r\n        }\r\n    }\r\n    else if (dir == 6) {\r\n        row = x;\r\n        col = dim - 1 - find;\r\n    }\r\n    else if (dir == 7) {\r\n        find = directions[dir][x].length - find - 1;\r\n        if (x < dim) {\r\n            row = x - find;\r\n            col = find;\r\n        } else {\r\n            row = dim - 1 - find;\r\n            col = x - dim + 1 + find;\r\n        }\r\n    }\r\n    return [row, col];\r\n}\r\n\r\nexport default {find, stringCoordsToGridCoords};","import React, { Component } from \"react\";\n\nimport Puzzle from \"./components/Puzzle\";\nimport ProblemControls from \"./components/ProblemControls\"\nimport SearchControls from \"./components/SearchControls\";\nimport WordSearch from \"./algorithms/WordSearch\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleStartSearch = this.handleStartSearch.bind(this);\n    this.handleSpeedChange = this.handleSpeedChange.bind(this);\n    this.handleSelectedWordChange = this.handleSelectedWordChange.bind(this);\n    this.handleSelectedProblemChange = this.handleSelectedProblemChange.bind(this);\n\n    this.state = {\n      words: [],\n      letters: [[]],\n      colors: [[]],\n      speed: 350,\n      selectedWord: '',\n    };\n  }\n\n  componentDidMount() {\n    let initState = this.state;\n    initState.words = [\"Purdue\", 'hey', 'yeh', 'zop', 'poz', 'don', 'nod', 'mnd', 'aor'];\n    initState.letters = [\n        ['D','R','L','B','V','W','R'],\n        ['P','E','E','K','P','E','E'],\n        ['O','U','D','K','P','S','L'],\n        ['U','A','R','O','A','T','I'],\n        ['L','E','Z','D','N','M','O'],\n        ['Y','D','N','I','U','E','B'],\n        ['I','O','P','H','H','E','Y'],\n      ];\n      initState.colors = Array(initState.letters.length);\n      for (let row = 0; row < initState.colors.length; row++) {\n        initState.colors[row] = Array(initState.letters[row].length);\n        for (let col = 0; col < initState.letters[row].length; col++) {\n          initState.colors[row][col] = '';\n        }\n      }\n      initState.selectedWord = initState.words[0];\n      this.setState(initState);\n  }\n  handleStartSearch() {\n    let target = this.state.selectedWord.toUpperCase().split(\" \").join(\"\");\n    const animation = WordSearch.find(this.state.letters, target);\n    \n    for (let i = 0; i < animation.length; i++) {\n      setTimeout( () => {\n        let newState = this.state;\n        newState.colors = animation[i];\n        this.setState(newState);\n      }, (500-this.state.speed)*i);\n    }\n  }\n\n  handleSpeedChange(newSpeed) {\n    let newState = this.state;\n    newState.speed = newSpeed;\n    this.setState(newState);\n  }\n\n  handleSelectedWordChange(newWord) {\n    let newState = this.state;\n    newState.selectedWord = newWord;\n    this.setState(newState);\n  }\n\n  handleSelectedProblemChange(newProblem) {\n    let newState = this.state;\n    this.setState(newState);\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Container>\n          <Row>\n            <ProblemControls\n            onSelectedProblemChange = {this.handleSelectedProblemChange}\n            />\n          </Row>\n          <Row>\n            <Col md={{ span: 3, offset: 0 }}>\n              <Puzzle\n                letters = {this.state.letters}\n                colors = {this.state.colors}\n              />\n            </Col>\n            <Col md={{ span: 3, offset: 0 }}>\n              <SearchControls\n                words = {this.state.words}\n                speed = {this.state.speed}\n                onSelectedWordChange = {this.handleSelectedWordChange}\n                onSpeedChange = {this.handleSpeedChange}\n                onStartSearch = {this.handleStartSearch}\n              />\n            </Col>\n          </Row>\n        </Container>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}