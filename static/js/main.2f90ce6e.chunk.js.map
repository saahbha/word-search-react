{"version":3,"sources":["components/Puzzle.jsx","problems/default.txt","problems/coding-languages.txt","problems/famous-artists.txt","problems/american-revolution.txt","problems/car-makes.txt","problems/greek-history.txt","problems/naruto-characters.txt","components/ProblemControls.jsx","components/SearchControls.jsx","algorithms/BoyerMoore.js","algorithms/WordSearch.js","App.js","reportWebVitals.js","index.js"],"names":["Puzzle","props","state","letters","colors","grid","class","this","map","row","index","letter","i","style","backgroundColor","Card","Header","Body","Text","Component","ProblemControls","handleSelectedProblemChange","bind","event","a","getTextFrom","target","value","problem","parseTextToProblem","onSelectedProblemChange","location","fetch","then","response","text","catch","err","console","log","lines","split","letterGrid","trim","push","test","words","word","Title","Form","Select","onChange","defaultProblem","codinglanguages","narutoCharacters","carMakes","americanRevolution","greekHistory","famousArtists","SearchControls","handleStartSearch","handleStopSearch","handleSpeedChange","handleSelectedWordChange","speed","selectedWord","searching","newState","setState","onStartSearch","onStopSearch","onSpeedChange","onSelectedWordChange","button","Button","variant","onClick","selected","className","Range","defaultValue","min","max","step","selection","dir","x","m","directions","dim","frames","newFrame","JSON","parse","stringify","coords","WordSearch","stringCoordsToGridCoords","col","colorLetter","color","length","BoyerMooreFind","T","P","n","lof","string","current","charAt","undefined","toString","lastOccurrenceFunction","j","t","l","parseInt","Math","reverseString","reverse","join","find","puzzleGrid","Array","vertical","columns","getVertical","horizontal","rows","getRows","aDiagonal","ascendingDiagonal","startRow","startCol","getAscendingDiagonals","dDiagonal","descendingDiagonal","arrIndex","getDescendingDiagonals","rvertical","rhorizontal","raDiagonal","rdDiagonal","search","direction","result","App","handleHide","handleShow","setColor","initState","emptyColors","shouldShow","animator","toUpperCase","animation","setTimeout","finishedSearchingState","frame","clearTimeout","newSpeed","newWord","newProblem","Fragment","Modal","size","show","onHide","closeButton","Container","Row","Col","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f90ce6e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Puzzle.css\";\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\nclass Puzzle extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      letters: this.props.letters,\r\n      colors: this.props.colors,\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const grid = (\r\n      <div class=\"Puzzle\">\r\n        <table class=\"Puzzle-Grid\">\r\n          {this.props.letters.map((row, index) => (\r\n            <tr>\r\n              {row.map((letter, i) => (\r\n                <th\r\n                  class=\"Letter\"\r\n                  style={{ backgroundColor: this.props.colors[index][i] }}\r\n                >\r\n                  {letter}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </table>\r\n      </div>\r\n    );\r\n    return (\r\n      <Card>\r\n        <Card.Header>Puzzle Grid</Card.Header>\r\n        <Card.Body>\r\n          <Card.Text>\r\n            Here's the word search puzzle! Press the start search button to\r\n            watch the computer find a word in this puzzle.\r\n          </Card.Text>\r\n          <>{grid}</>\r\n        </Card.Body>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Puzzle;\r\n","export default __webpack_public_path__ + \"static/media/default.666b0f8e.txt\";","export default __webpack_public_path__ + \"static/media/coding-languages.0ae5ec2a.txt\";","export default __webpack_public_path__ + \"static/media/famous-artists.d41f5289.txt\";","export default __webpack_public_path__ + \"static/media/american-revolution.cb1f79d1.txt\";","export default __webpack_public_path__ + \"static/media/car-makes.49cf2e6f.txt\";","export default __webpack_public_path__ + \"static/media/greek-history.4eaf00c3.txt\";","export default __webpack_public_path__ + \"static/media/naruto-characters.dd363088.txt\";","import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\nimport defaultProblem from \"../problems/default.txt\";\r\nimport codinglanguages from \"../problems/coding-languages.txt\";\r\nimport famousArtists from \"../problems/famous-artists.txt\";\r\nimport americanRevolution from \"../problems/american-revolution.txt\";\r\nimport carMakes from \"../problems/car-makes.txt\";\r\nimport greekHistory from \"../problems/greek-history.txt\";\r\nimport narutoCharacters from \"../problems/naruto-characters.txt\";\r\n\r\nclass ProblemControls extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleSelectedProblemChange =\r\n      this.handleSelectedProblemChange.bind(this);\r\n  }\r\n\r\n  async handleSelectedProblemChange(event) {\r\n    let problem = await this.getTextFrom(event.target.value);\r\n    problem = this.parseTextToProblem(problem);\r\n    this.props.onSelectedProblemChange(problem);\r\n  }\r\n\r\n  async getTextFrom(location) {\r\n    let response = await fetch(location)\r\n      .then((response) => response.text())\r\n      .catch((err) => console.log(err));\r\n    return response;\r\n  }\r\n\r\n  parseTextToProblem(text) {\r\n    let lines = text.split(\"\\n\");\r\n\r\n    let letterGrid = [];\r\n    let i = 0;\r\n    do {\r\n      let letters = lines[i].trim().split(\"\");\r\n      letterGrid.push(letters);\r\n      i++;\r\n    } while (!/^\\s*$/.test(lines[i]));\r\n    i++;\r\n    let words = [];\r\n    do {\r\n      let word = lines[i].trim();\r\n      words.push(word);\r\n      i++;\r\n    } while (lines[i] && lines[i].trim());\r\n    let problem = {};\r\n    problem.letters = letterGrid;\r\n    problem.words = words;\r\n    return problem;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <Card.Header>Problem Controls</Card.Header>\r\n        <Card.Body>\r\n          <Card.Title>Problem Selector</Card.Title>\r\n          <Card.Text>\r\n            Use the select menu below to change the problem.\r\n          </Card.Text>\r\n          <Form.Select\r\n            aria-label=\"Problem Selector\"\r\n            onChange={this.handleSelectedProblemChange}\r\n          >\r\n            <option value={defaultProblem}>Default (7x7)</option>\r\n            <option value={codinglanguages}>Coding Languages (11x11)</option>\r\n            <option value={narutoCharacters}>Naruto Characters (12x12)</option>\r\n            <option value={carMakes}>Car Makes (15x15)</option>\r\n            <option value={americanRevolution}>\r\n              American Revolution (21x21)\r\n            </option>\r\n            <option value={greekHistory}>Greek History (22x22)</option>\r\n            <option value={famousArtists}>Famous Artists (24x24)</option>\r\n          </Form.Select>\r\n        </Card.Body>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\nexport default ProblemControls;\r\n","import React, { Component } from \"react\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Card from \"react-bootstrap/Card\";\r\n\r\nclass SearchControls extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleStartSearch = this.handleStartSearch.bind(this);\r\n    this.handleStopSearch = this.handleStopSearch.bind(this);\r\n    this.handleSpeedChange = this.handleSpeedChange.bind(this);\r\n    this.handleSelectedWordChange = this.handleSelectedWordChange.bind(this);\r\n\r\n    this.state = {\r\n      speed: this.props.speed,\r\n      words: this.props.words,\r\n      selectedWord: this.props.selectedWord,\r\n      searching: this.props.searching,\r\n    };\r\n  }\r\n\r\n  handleStartSearch() {\r\n    let newState = this.state;\r\n    newState.searching = true;\r\n    this.setState(newState);\r\n\r\n    this.props.onStartSearch();\r\n  }\r\n\r\n  handleStopSearch() {\r\n    let newState = this.state;\r\n    newState.searching = false;\r\n    this.setState(newState);\r\n\r\n    this.props.onStopSearch();\r\n  }\r\n\r\n  handleSpeedChange(event) {\r\n    this.props.onSpeedChange(event.target.value);\r\n  }\r\n\r\n  handleSelectedWordChange(event) {\r\n    this.props.onSelectedWordChange(event.target.value);\r\n  }\r\n\r\n  render() {\r\n    let button;\r\n    if (this.props.searching) {\r\n      button = (\r\n        <Button variant=\"danger\" onClick={this.handleStopSearch}>\r\n          End Search\r\n        </Button>\r\n      );\r\n    } else {\r\n      button = (\r\n        <Button variant=\"primary\" onClick={this.handleStartSearch}>\r\n          Start Search\r\n        </Button>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Card>\r\n        <Card.Header>Search Controls</Card.Header>\r\n        <Card.Body>\r\n          <Card.Title>Word Selector</Card.Title>\r\n          <Card.Text>\r\n            Use the select menu below to pick which word to search the puzzle\r\n            for.\r\n          </Card.Text>\r\n          <>\r\n            <Form.Select\r\n              aria-label=\"Word Selector\"\r\n              onChange={this.handleSelectedWordChange}\r\n            >\r\n              {this.props.words.map((word) => (\r\n                <option\r\n                  value={word}\r\n                  selected={word === this.props.selectedWord}\r\n                >\r\n                  {word}\r\n                </option>\r\n              ))}\r\n            </Form.Select>\r\n          </>\r\n          <Card.Title className=\"mt-3\">Speed</Card.Title>\r\n          <Card.Text>\r\n            Pick how fast the computer should be. Move the slider all the way to\r\n            the right to solve the problem instantly. For larger problems and/or\r\n            smaller words, I recommend using higher speeds.\r\n          </Card.Text>\r\n          <>\r\n            <Form.Range\r\n              defaultValue={this.state.speed}\r\n              min={0}\r\n              max={500}\r\n              step={5}\r\n              onChange={this.handleSpeedChange}\r\n            />\r\n          </>\r\n          <Card.Title>Search</Card.Title>\r\n          <Card.Text>Watch how the computer solves the puzzle!</Card.Text>\r\n          <>{button}</>\r\n        </Card.Body>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\nexport default SearchControls;\r\n","import WordSearch from './WordSearch';\r\n\r\nfunction lastOccurrenceFunction(string) {\r\n    let lof = {};\r\n\tfor (let i = string.length - 1; i >= 0; i--) {\r\n        let current = string.charAt(i);\r\n        if (lof[current] === undefined) {\r\n            lof[current] = i.toString();\r\n        }\r\n    }\r\n    return lof;\r\n}\r\n\r\nfunction BoyerMooreFind(T, P, colors, dir, x, directions, dim){\r\n    let n = T.length;\r\n    let m = P.length;\r\n    if (m > n) return [-1, colors];\r\n    let lof = lastOccurrenceFunction(P);\r\n\r\n    let i = m - 1;\r\n    let j = m - 1;\r\n    //color the selection grey\r\n    colors = selection(dir, x, i, m, directions, dim, colors);\r\n    do {\r\n        let t = T.charAt(i);\r\n        let p = P.charAt(j);\r\n        //match\r\n        if (t == p) {\r\n            //color the letter corisponding to 't' is green\r\n            colors = colorLetter(dir, x, i, 'green', directions, dim, colors);\r\n\r\n            if (j == 0) return [i, colors];\r\n            else {\r\n                i--;\r\n                j--;\r\n            }\r\n        }\r\n        //no match\r\n        else {\r\n            //color the letter corisponding to 't' is red\r\n            colors = colorLetter(dir, x, i, 'red', directions, dim, colors);\r\n\r\n            let l = -1;\r\n            if (lof[t] !== undefined) {\r\n                //color the letter corisponding to 't' is orange \r\n                colors = colorLetter(dir, x, i, 'orange', directions, dim, colors);\r\n                l = parseInt(lof[t]);\r\n            }\r\n            i = i + m - Math.min(j, 1 + l);\r\n            j = m - 1;\r\n\r\n            //start over \r\n            //colors = emptyColors(colors, dim);\r\n            if (!(i > n - 1)) {\r\n                //color the selection grey\r\n                colors = selection(dir, x, i, m, directions, dim, colors);\r\n            }\r\n        }\r\n    } while (!(i > n - 1));\r\n\r\n    return [-1, colors];\r\n}\r\n\r\nfunction selection(dir, x, i, m, directions, dim, frames) {\r\n    let newFrame = JSON.parse(JSON.stringify(frames[0]));\r\n    for (let index = i; index >= (i - m + 1); index--) {\r\n        let coords = WordSearch.stringCoordsToGridCoords(dir, x, index, directions, dim);\r\n        let row = coords[0];\r\n        let col = coords[1];\r\n        newFrame[row][col] = 'grey';\r\n    }\r\n    frames.push(newFrame);\r\n    return frames;\r\n}\r\n\r\nfunction colorLetter(dir, x, i, color, directions, dim, frames) {\r\n    let newFrame = JSON.parse(JSON.stringify(frames[frames.length-1]));\r\n    let coords = WordSearch.stringCoordsToGridCoords(dir, x, i, directions, dim);\r\n    let row = coords[0];\r\n    let col = coords[1];\r\n    newFrame[row][col] = color;\r\n    frames.push(newFrame);\r\n    return frames;\r\n}\r\n\r\nfunction emptyColors(frames, dim) {\r\n    let newFrame = Array(dim);\r\n    for (let row = 0; row < dim; row++) {\r\n        newFrame[row] = Array(dim);\r\n        for (let col = 0; col < dim; col++) {\r\n            newFrame[row][col] = '';\r\n        }\r\n    }\r\n    frames.push(newFrame);\r\n    return frames;\r\n}\r\n\r\nexport default BoyerMooreFind;","import BoyerMooreFind from \"./BoyerMoore\";\r\n\r\nfunction find(puzzleGrid, target) {\r\n    //initialize animation frames\r\n    let colors = Array(1);\r\n    colors[0] = Array(puzzleGrid.length);\r\n    for (let row = 0; row < colors[0].length; row++) {\r\n        colors[0][row] = Array(puzzleGrid[row].length);\r\n        for (let col = 0; col < puzzleGrid[row].length; col++) {\r\n            colors[0][row][col] = '';\r\n        }\r\n    }\r\n\r\n    let dim = puzzleGrid[0].length;\r\n    //generate strings for each basic direction\r\n    let vertical = getVertical(puzzleGrid);\r\n    let horizontal = getRows(puzzleGrid);\r\n    let aDiagonal = getAscendingDiagonals(puzzleGrid);\r\n    let dDiagonal = getDescendingDiagonals(puzzleGrid);\r\n\r\n    //make sets of arrays for reverse order\r\n    let rvertical = new Array(vertical.length);\r\n    let rhorizontal = new Array(horizontal.length);\r\n    let raDiagonal = new Array(aDiagonal.length);\r\n    let rdDiagonal = new Array(dDiagonal.length);\r\n    for (let i = 0; i < vertical.length; i++) {\r\n        rvertical[i] = reverseString(vertical[i]);\r\n        rhorizontal[i] = reverseString(horizontal[i]);\r\n    }\r\n    for (let i = 0; i < aDiagonal.length; i++) {\r\n        raDiagonal[i] = reverseString(aDiagonal[i]);\r\n        rdDiagonal[i] = reverseString(dDiagonal[i]);\r\n    }\r\n\r\n    //put these in directions\r\n    let directions = new Array(8);\r\n    directions[0] = vertical;\r\n    directions[1] = dDiagonal;\r\n    directions[2] = horizontal;\r\n    directions[3] = aDiagonal;\r\n    directions[4] = rvertical;\r\n    directions[5] = rdDiagonal;\r\n    directions[6] = rhorizontal;\r\n    directions[7] = raDiagonal;\r\n\r\n    //Search using BoyerMoore\r\n    let dir = 0;\r\n    let index = 0;\r\n    let x = 0;\r\n    search:\r\n    for (dir = 0; dir <= directions.length; dir++) {\r\n        if (dir == 8) {\r\n            dir = -1;\r\n            break search;\r\n        }\r\n        let direction = directions[dir];\r\n        for (x = 0; x < direction.length; x++) {\r\n            //string, word to find, color grid, the direction, the string number in this direction, the dimension of the grid\r\n            let result = BoyerMooreFind(direction[x], target, colors, dir, x, directions, dim);\r\n            index = result[0];\r\n            colors = result[1];\r\n            if (index != -1) break search;\r\n        }\r\n    }\r\n\r\n    return colors;\r\n}\r\n\r\n\r\nfunction reverseString(string) {\r\n    return string.split(\"\").reverse().join(\"\");\r\n}\r\n\r\nfunction getVertical(puzzleGrid) {\r\n    let dim = puzzleGrid[0].length;\r\n    let columns = new Array(dim);\r\n    //Get Column Strings from the puzzleGrid\r\n    for (let col = 0; col < dim; col++) {\r\n        columns[col] = \"\";\r\n        for (let row = 0; row < dim; row++) {\r\n            columns[col] += puzzleGrid[row][col];\r\n        }\r\n    }\r\n    return columns;\r\n}\r\n\r\nfunction getRows(puzzleGrid) {\r\n    let dim = puzzleGrid[0].length;\r\n    let rows = new Array(dim);\r\n    //Get Row Strings from the puzzleGrid\r\n    for (let row = 0; row < dim; row++) {\r\n        rows[row] = \"\";\r\n        for (let col = 0; col < dim; col++) {\r\n            rows[row] += puzzleGrid[row][col];\r\n        }\r\n    }\r\n    return rows;\r\n}\r\n\r\nfunction getAscendingDiagonals(puzzleGrid) {\r\n    let dim = puzzleGrid[0].length;\r\n    let ascendingDiagonal = new Array(dim*2 - 1);\r\n    for (let startRow = 0; startRow < dim; startRow++) {\r\n        ascendingDiagonal[startRow] = \"\";\r\n        for (let col = 0; col <= startRow; col++) {\r\n            ascendingDiagonal[startRow] += puzzleGrid[startRow - col][col];\r\n        }\r\n    }\r\n    for (let startCol = 1; startCol < dim; startCol++) {\r\n        ascendingDiagonal[dim + startCol - 1] = \"\";\r\n        for (let row = dim - 1; row >= startCol; row--) {\r\n            ascendingDiagonal[dim - 1 + startCol] += puzzleGrid[row][startCol + (dim - 1) - row];\r\n        }\r\n    }\r\n\r\n    return ascendingDiagonal;\r\n}\r\n\r\nfunction getDescendingDiagonals(puzzleGrid) {\r\n    let dim = puzzleGrid[0].length;\r\n    let descendingDiagonal = new Array(dim*2 - 1);\r\n    for (let startCol = dim - 1; startCol >= 0; startCol--) {\r\n        let arrIndex = dim - 1 - startCol;\r\n        descendingDiagonal[arrIndex] = \"\";\r\n        for (let row = 0; row <= arrIndex; row++) {\r\n            descendingDiagonal[arrIndex] += puzzleGrid[row][startCol + row];\r\n        }\r\n    }\r\n    for (let startRow = 1; startRow < dim; startRow++) {\r\n        let arrIndex = dim - 1 + startRow;\r\n        descendingDiagonal[arrIndex] = \"\";\r\n        for (let col = 0; col <= dim - 1 - startRow; col++) {\r\n            descendingDiagonal[arrIndex] += puzzleGrid[startRow + col][col];\r\n        }\r\n    }\r\n\r\n    return descendingDiagonal;\r\n}\r\n\r\nfunction stringCoordsToGridCoords(dir, x, find, directions, dim) {\r\n    let row = -1;\r\n    let col = -1;\r\n\r\n    //Translate (x,find) to (row,col)\r\n    if (dir == 0) {\r\n        row = find;\r\n        col = x;\r\n    }\r\n    else if (dir == 1) {\r\n        if (x < dim) {\r\n            row = find;\r\n            col = dim - 1 - x + find;\r\n        } else {\r\n            row = x - dim + 1 + find;\r\n            col = find;\r\n        }\r\n    }\r\n    else if (dir == 2) {\r\n        row = x;\r\n        col = find;\r\n    }\r\n    else if (dir == 3) {\r\n        if (x < dim) {\r\n            row = x - find;\r\n            col = find;\r\n        } else {\r\n            row = dim - 1 - find;\r\n            col = x - dim + 1 + find;\r\n        }\r\n    }\r\n    else if (dir == 4) {\r\n        row = dim - 1 - find;\r\n        col = x;\r\n    }\r\n    else if (dir == 5) {\r\n        find = directions[dir][x].length - find - 1;\r\n        if (x < dim) {\r\n            row = find;\r\n            col = dim - 1 - x + find;\r\n        } else {\r\n            row = x - dim + 1 + find;\r\n            col = find;\r\n        }\r\n    }\r\n    else if (dir == 6) {\r\n        row = x;\r\n        col = dim - 1 - find;\r\n    }\r\n    else if (dir == 7) {\r\n        find = directions[dir][x].length - find - 1;\r\n        if (x < dim) {\r\n            row = x - find;\r\n            col = find;\r\n        } else {\r\n            row = dim - 1 - find;\r\n            col = x - dim + 1 + find;\r\n        }\r\n    }\r\n    return [row, col];\r\n}\r\n\r\nexport default {find, stringCoordsToGridCoords};","import React, { Component } from \"react\";\r\n\r\nimport Puzzle from \"./components/Puzzle\";\r\nimport ProblemControls from \"./components/ProblemControls\"\r\nimport SearchControls from \"./components/SearchControls\";\r\nimport WordSearch from \"./algorithms/WordSearch\";\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleHide = this.handleHide.bind(this);\r\n    this.handleShow = this.handleShow.bind(this);\r\n\r\n    this.handleStartSearch = this.handleStartSearch.bind(this);\r\n    this.handleStopSearch = this.handleStopSearch.bind(this);\r\n    this.handleSpeedChange = this.handleSpeedChange.bind(this);\r\n    this.handleSelectedWordChange = this.handleSelectedWordChange.bind(this);\r\n    this.handleSelectedProblemChange = this.handleSelectedProblemChange.bind(this);\r\n\r\n    this.setColor = this.setColor.bind(this);\r\n\r\n    this.state = this.initState();\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState(this.initState());\r\n  }\r\n\r\n  initState() {\r\n    let initState = {\r\n      words: [],\r\n      letters: [[]],\r\n      colors: [[]],\r\n      selectedWord: '',\r\n      speed: 0,\r\n      selectedWord: '',\r\n      shouldShow: false,\r\n      animator: [],\r\n      searching: false,\r\n    };\r\n    initState.words = [\r\n      \"Purdue\", \r\n      \"Eudrup\",\r\n      \"Hey\",\r\n      \"Yeh\",\r\n      \"Zop\",\r\n      \"Poz\",\r\n      \"Don\",\r\n      \"Nod\",\r\n      \"Mnd\",\r\n      \"Dnm\",\r\n      \"Aor\",\r\n      \"Roa\"\r\n    ];\r\n    initState.letters = [\r\n        ['D','R','L','B','V','W','R'],\r\n        ['P','E','E','K','P','E','E'],\r\n        ['O','U','D','K','P','S','L'],\r\n        ['U','A','R','O','A','T','I'],\r\n        ['L','E','Z','D','N','M','O'],\r\n        ['Y','D','N','I','U','E','B'],\r\n        ['I','O','P','H','H','E','Y'],\r\n    ];\r\n    initState.colors = this.emptyColors(initState.letters);\r\n    initState.selectedWord = initState.words[0];\r\n    initState.speed = 400;\r\n    initState.shouldShow = false;\r\n    initState.animator = [];\r\n    initState.searching = false;\r\n    return initState;\r\n  }\r\n\r\n  handleHide() {\r\n    this.handleStopSearch();\r\n    let newState = this.initState();\r\n    newState.shouldShow = false;\r\n    this.setState(newState);\r\n  }\r\n\r\n  handleShow() {\r\n    let newState = this.state;\r\n    newState.shouldShow = true;\r\n    this.setState(newState);\r\n  }\r\n\r\n  handleStartSearch() {\r\n    this.handleStopSearch();\r\n    let target = this.state.selectedWord.toUpperCase().split(\" \").join(\"\");\r\n    const animation = WordSearch.find(this.state.letters, target);\r\n    \r\n    if (this.state.speed == 500) {\r\n      this.setColor(animation[animation.length-1]);\r\n    } else {\r\n      let newState = this.state;\r\n      newState.searching = true;\r\n      for (let i = 0; i < animation.length; i++) {\r\n        newState.animator.push(setTimeout( () => {\r\n          this.setColor(animation[i]);\r\n          if (i == animation.length-1) {\r\n            let finishedSearchingState = this.state;\r\n            finishedSearchingState.searching = false;\r\n            this.setState(finishedSearchingState)\r\n          }\r\n        }, (500-this.state.speed)*i));      \r\n      }\r\n      this.setState(newState);\r\n    }\r\n  }\r\n\r\n  setColor(frame) {\r\n    let newState = this.state;\r\n    newState.colors = frame;\r\n    this.setState(newState);\r\n  }\r\n\r\n  handleStopSearch() {\r\n    let newState = this.state;\r\n    newState.searching = false;\r\n    for (let frame = 0; frame < newState.animator.length; frame++) {\r\n      clearTimeout(newState.animator[frame]);\r\n    }\r\n    newState.colors = this.emptyColors(newState.letters);\r\n\r\n    this.setState(newState);\r\n  }\r\n\r\n  emptyColors(letters) {\r\n    let emptyColors = Array(letters.length);\r\n    for (let row = 0; row < letters.length; row++) {\r\n      emptyColors[row] = Array(letters[row].length);\r\n      for (let col = 0; col < letters[row].length; col++) {\r\n        emptyColors[row][col] = '';\r\n      }\r\n    }\r\n    return emptyColors;\r\n  }\r\n\r\n  handleSpeedChange(newSpeed) {\r\n    this.handleStopSearch();\r\n    let newState = this.state;\r\n    newState.speed = newSpeed;\r\n    this.setState(newState);\r\n  }\r\n\r\n  handleSelectedWordChange(newWord) {\r\n    this.handleStopSearch();\r\n    let newState = this.state;\r\n    newState.selectedWord = newWord;\r\n    this.setState(newState);\r\n  }\r\n\r\n  handleSelectedProblemChange(newProblem) {\r\n    this.handleStopSearch();\r\n    let newState = this.state;\r\n    newState.letters = newProblem.letters;\r\n    newState.words = newProblem.words;\r\n    newState.selectedWord = newState.words[0];\r\n\r\n    let emptyColors = Array(newState.letters.length);\r\n    for (let row = 0; row < newState.letters.length; row++) {\r\n      emptyColors[row] = Array(newState.letters[row].length);\r\n      for (let col = 0; col < newState.letters[row].length; col++) {\r\n        emptyColors[row][col] = '';\r\n      }\r\n    }\r\n    newState.colors = emptyColors;\r\n\r\n    this.setState(newState);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Button onClick={this.handleShow}>Launch Word Search React App</Button>\r\n        <Modal\r\n          size=\"lg\"\r\n          show={this.state.shouldShow}\r\n          onHide={this.handleHide}\r\n        >\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>\r\n            Word Search React App\r\n            </Modal.Title>\r\n          </Modal.Header>\r\n            <Modal.Body>\r\n            <Container>\r\n              <Row className=\"justify-content-center mb-3\">\r\n                <Col>\r\n                  <ProblemControls\r\n                  onSelectedProblemChange = {this.handleSelectedProblemChange}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row className=\"justify-content-center\">\r\n                <Col>\r\n                    <SearchControls\r\n                      words = {this.state.words}\r\n                      speed = {this.state.speed}\r\n                      searching = {this.state.searching}\r\n                      selectedWord = {this.state.selectedWord}\r\n                      onSelectedWordChange = {this.handleSelectedWordChange}\r\n                      onSpeedChange = {this.handleSpeedChange}\r\n                      onStartSearch = {this.handleStartSearch}\r\n                      onStopSearch = {this.handleStopSearch}\r\n                    />\r\n                </Col>\r\n                <Col>\r\n                  <Puzzle\r\n                    letters = {this.state.letters}\r\n                    colors = {this.state.colors}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            </Container>\r\n          </Modal.Body>\r\n        </Modal>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}